# -*- coding: utf-8 -*-
"""
/***************************************************************************
 GenerateCoordinates
                                 A QGIS plugin
 Calculate Coordinates given one point,bearing and distances
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-01-17
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Jcad
        email                : jcad.contact@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction,QFileDialog,QButtonGroup,QApplication, QSizePolicy, QPushButton, QVBoxLayout, QProgressBar, QWidget,QMessageBox
from qgis.PyQt import QtCore, QtGui, QtWidgets

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .generate_coordinates_dialog import GenerateCoordinatesDialog
import os.path
import math


class GenerateCoordinates:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'GenerateCoordinates_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Polar Computation')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('GenerateCoordinates', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/generate_coordinates/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Calculate coordinates'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Polar Computation'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = GenerateCoordinatesDialog()
            self.dlg.add_point.clicked.connect(self.calculate_new_coordinates)
            self.dlg.reset.clicked.connect(self.reset)
            self.dlg.clear_coordinates.clicked.connect(self.clear_new_coords)
            self.dlg.close.clicked.connect(self.calculate_error)
            self.dlg.clear_memory.clicked.connect(self.clear_memory)
            self.dlg.remove.clicked.connect(self.remove)
            self.dlg.gen_data.setColumnCount(5)
            self.dlg.gen_data.setRowCount(0)
            self.dlg.gen_data.setHorizontalHeaderLabels(['Station','Degrees','Minutes','Seconds','Distance'])
            global x
            global y
            x,y=[],[]

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass
    
    def calculate_new_coordinates(self):
        global new_c
        station=self.dlg.station.text()
        forward_bearing=self.dlg.forward_bearing.isChecked()
        back_bearing=self.dlg.back_bearing.isChecked()
        d,m,s=float(self.dlg.degrees.text()),float(self.dlg.minutes.text()),float(self.dlg.seconds.text())
        degrees_dec=(((s/60)+m)/60)+d
        if back_bearing==True:
            if degrees_dec-180<0:
                degrees_dec=(degrees_dec-180)+360
            else:
                degrees_dec=degrees_dec-180
        else:
            degrees_dec=degrees_dec
        if len(x)==0:
            x.append(float(self.dlg.start_x.text()))
            y.append(float(self.dlg.start_y.text()))
        distance=float(self.dlg.distance.text())
        change_x=distance*math.sin(math.radians(degrees_dec))
        change_y=distance*math.cos(math.radians(degrees_dec))
        new_x,new_y=x[-1]+change_x,y[-1]+change_y
        new_c=station+','+str(round(new_y,2))+','+str(round(new_x,2))
        self.dlg.new_coordinates.append(new_c)
        x.append(new_x)
        y.append(new_y)
        self.table_etries()
    def calculate_error(self):
        self.dlg.error_report.clear()
        end_x=float(self.dlg.end_x.text())
        end_y=float(self.dlg.end_y.text())
        x_e,y_e=end_x-x[-1],end_y-y[-1]
        dist=math.sqrt((x_e**2)+(y_e**2))
        output='Y-Error: '+str(round(y_e,3))+';\nX-Error: '+str(round(x_e,3))+';\nDistance Error: '+str(round(dist,3))
        if dist>0.03:
            remarks='The Error margin is too big'
        else:
            remarks='The error is insignificant, continue to plot'
        output=output+';\n'+'Remarks: '+remarks
        self.dlg.error_report.append(output)
    def reset(self):
        self.dlg.start_x.clear()
        self.dlg.start_y.clear()
        self.dlg.degrees.clear()
        self.dlg.minutes.clear()
        self.dlg.seconds.clear()
        self.dlg.distance.clear()
        self.dlg.end_x.clear()
        self.dlg.end_y.clear()
        self.dlg.station.clear()
        self.dlg.error_report.clear()
        x.clear()
        y.clear()
    def check(self):
        pass
    def clear_new_coords(self):
        self.dlg.new_coordinates.clear()
        self.dlg.gen_data.clearContents()
        self.dlg.gen_data.setSortingEnabled(False)
        self.dlg.gen_data.setRowCount(0)
        self.dlg.gen_data.setCurrentCell(0, 0)
    def clear_memory(self):
        x.clear()
        y.clear()
    def remove(self):
        self.dlg.new_coordinates.undo()
        try:
            del x[-1]
            del y[-1]
        except IndexError:
            pass
        self.dlg.gen_data.removeRow(self.dlg.gen_data.currentRow())
    def table_etries(self):
        row = self.dlg.gen_data.rowCount()
        self.dlg.gen_data.insertRow(row)
        self.dlg.gen_data.setItem(row,0, QtWidgets.QTableWidgetItem(self.dlg.station.text()))
        self.dlg.gen_data.setItem(row,1, QtWidgets.QTableWidgetItem(self.dlg.degrees.text()))
        self.dlg.gen_data.setItem(row,2, QtWidgets.QTableWidgetItem(self.dlg.minutes.text()))
        self.dlg.gen_data.setItem(row,3, QtWidgets.QTableWidgetItem(self.dlg.seconds.text()))
        self.dlg.gen_data.setItem(row,4, QtWidgets.QTableWidgetItem(self.dlg.distance.text()))
        
        
